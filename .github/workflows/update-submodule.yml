name: Update Submodules

on:
  push:
    branches:
      - '**'   # This runs on any branch

jobs:
  update-submodules:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository with submodules
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        submodules: 'recursive'  # Ensure submodules are checked out

    # Step 2: Reset submodule to the latest commit
    - name: Reset submodule to latest commit
      run: |
        # Reinitialize the submodule (resets its state)
        git submodule update --init --recursive
        git submodule foreach 'git reset --hard origin/main'  # This resets the submodule to the latest commit from remote

    # Step 3: Check if the submodule is already up-to-date
    - name: Check submodule status
      id: submodule-status
      run: |
        # Fetch the current commit of the submodule
        CURRENT_COMMIT=$(git submodule status --recursive | awk '{ print $1 }')
        
        # Ensure we're working with the latest submodule state
        git submodule update --init --recursive  # Initialize or update submodule to ensure it's in sync
        
        # Go to the submodule directory and fetch the latest commits from the remote repository
        cd path/to/submodule  # Ensure you replace this with the actual submodule path
        git fetch origin  # Fetch the latest changes from the remote
        git checkout main  # Ensure we're on the main branch (or whichever branch you want)
        git pull origin main  # Pull the latest changes from the remote

        # Get the latest commit hash after the update
        LATEST_COMMIT=$(git rev-parse HEAD)

        # Check if the submodule commit has changed
        if [ "$CURRENT_COMMIT" != "$LATEST_COMMIT" ]; then
          echo "Submodule updated."
          echo "submodule_updated=true" >> $GITHUB_ENV
        else
          echo "No submodule update needed."
          echo "submodule_updated=false" >> $GITHUB_ENV
        fi

    # Step 4: Commit changes only if submodules were updated
    - name: Commit changes
      if: env.submodule_updated == 'true'
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git add .
        git commit -m "CI: Update submodules" || echo "No changes to commit"

    # Step 5: Pull the latest changes from the remote branch before pushing
    - name: Pull the latest changes
      if: env.submodule_updated == 'true'
      run: git pull origin main --rebase --allow-unrelated-histories

    # Step 6: Push the changes back to the repository
    - name: Push changes
      if: env.submodule_updated == 'true'
      env:
        TOKEN: ${{ secrets.PAT_TOKEN }}
      run: |
        git remote set-url origin https://x-access-token:${TOKEN}@github.com/${{ github.repository }}.git
        git push origin HEAD
